{"version":3,"sources":["components/Snek.tsx","components/Food.tsx","components/App.tsx","index.tsx"],"names":["props","snekBodys","map","seg","i","style","left","top","className","getRandomXY","Math","floor","random","startingState","started","food","vector","previousVector","size","speed","intervalId","App","state","onKeyDown","e","ev","window","event","setState","keyCode","console","log","clearInterval","setInterval","slither","segments","head","length","push","shift","document","onkeydown","this","borderCheck","snekBorderCheck","onFood","onGameOver","alert","wholeSnek","pop","forEach","growSnek","increaseSpeed","newSnek","unshift","id","Snek","Food","Component","rootElement","getElementById","render"],"mappings":"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","file":"static/js/main.83cdb15c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default (props: any) => {\r\n  return (\r\n    <div>\r\n      {props.snekBodys.map((seg: any, i: number) => {\r\n        const style = {\r\n          left: `${seg[0]}%`,\r\n          top: `${seg[1]}%`\r\n        };\r\n        return <div className=\"snek-seg\" key={i} style={style}></div>;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default (props: any) => {\r\n  const style = {\r\n    left: `${props.seg[0]}%`,\r\n    top: `${props.seg[1]}%`\r\n  };\r\n\r\n  return <div className=\"snek-food\" style={style}></div>;\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Snek from \"./Snek\";\r\nimport Food from \"./Food\";\r\n//import Snek from \"./Snek\";\r\n// import { render } from 'react-dom';\r\n// import Canvas from \"./canvas\";\r\nimport \"./styles.css\";\r\n\r\nconst getRandomXY = () => {\r\n  const size = 4;\r\n  let min = 1;\r\n  let max = 99;\r\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / size) * size;\r\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / size) * size;\r\n  return [x, y];\r\n};\r\n\r\nconst startingState = {\r\n  started: false,\r\n  food: getRandomXY(),\r\n  vector: \"RIGHT\",\r\n  previousVector: \"RIGHT\",\r\n  size: 4,\r\n  speed: 150,\r\n  intervalId: 0,\r\n  snekBodys: [\r\n    [0, 0],\r\n    [4, 0]\r\n  ]\r\n};\r\n\r\nclass App extends Component {\r\n  state = startingState;\r\n\r\n  componentDidMount() {\r\n    document.onkeydown = this.onKeyDown;\r\n    // document.onkeyup = this.slither;\r\n  }\r\n  shouldComponentUpdate() {\r\n    return this.state.started;\r\n  }\r\n  componentDidUpdate() {\r\n    this.borderCheck();\r\n    this.snekBorderCheck();\r\n    this.onFood();\r\n  }\r\n\r\n  onKeyDown = (e: any) => {\r\n    const ev = e || window.event;\r\n    this.setState({ previousVector: this.state.vector });\r\n    switch (ev.keyCode) {\r\n      case 38:\r\n        if (this.state.previousVector !== \"DOWN\") {\r\n          this.setState({ vector: \"UP\" });\r\n        }\r\n        console.log(\"UP\");\r\n        break;\r\n      case 40:\r\n        if (this.state.previousVector !== \"UP\") {\r\n          this.setState({ vector: \"DOWN\" });\r\n        }\r\n        console.log(\"DOWN\");\r\n        break;\r\n      case 37:\r\n        if (this.state.previousVector !== \"RIGHT\") {\r\n          this.setState({ vector: \"LEFT\" });\r\n        }\r\n        console.log(\"LEFT\");\r\n        break;\r\n      case 39:\r\n        if (this.state.previousVector !== \"LEFT\") {\r\n          this.setState({ vector: \"RIGHT\" });\r\n        }\r\n        console.log(\"RIGHT\");\r\n        break;\r\n    }\r\n\r\n    if (!this.state.started) {\r\n      this.setState({ started: true });\r\n      clearInterval(this.state.intervalId);\r\n      let intervalId = setInterval(this.slither, this.state.speed);\r\n      this.setState({ intervalId: intervalId });\r\n    }\r\n  };\r\n\r\n  slither = () => {\r\n    let segments = [...this.state.snekBodys];\r\n    let head = segments[segments.length - 1];\r\n    const size = this.state.size;\r\n\r\n    switch (this.state.vector) {\r\n      case \"RIGHT\":\r\n        head = [head[0] + size, head[1]];\r\n        break;\r\n      case \"LEFT\":\r\n        head = [head[0] - size, head[1]];\r\n        break;\r\n      case \"DOWN\":\r\n        head = [head[0], head[1] + size];\r\n        break;\r\n      case \"UP\":\r\n        head = [head[0], head[1] - size];\r\n        break;\r\n    }\r\n    segments.push(head);\r\n    segments.shift();\r\n    this.setState({\r\n      snekBodys: segments\r\n    });\r\n  };\r\n\r\n  borderCheck() {\r\n    let head = this.state.snekBodys[this.state.snekBodys.length - 1];\r\n    const size = this.state.size;\r\n    if (\r\n      head[0] > 100 - size ||\r\n      head[1] > 100 - size ||\r\n      head[0] < 0 ||\r\n      head[1] < 0\r\n    ) {\r\n      this.onGameOver();\r\n    }\r\n  }\r\n  onGameOver() {\r\n    clearInterval(this.state.intervalId);\r\n    alert(`Game Over. Dead Snek length is ${this.state.snekBodys.length}`);\r\n    this.setState(startingState);\r\n  }\r\n\r\n  snekBorderCheck() {\r\n    let wholeSnek = [...this.state.snekBodys];\r\n    let head = wholeSnek[wholeSnek.length - 1];\r\n    wholeSnek.pop();\r\n    wholeSnek.forEach((seg) => {\r\n      if (head[0] === seg[0] && head[1] === seg[1]) {\r\n        this.onGameOver();\r\n      }\r\n    });\r\n  }\r\n\r\n  onFood() {\r\n    let head = this.state.snekBodys[this.state.snekBodys.length - 1];\r\n    let food = this.state.food;\r\n    if (head[0] === food[0] && head[1] === food[1]) {\r\n      this.setState({\r\n        food: getRandomXY()\r\n      });\r\n      this.growSnek();\r\n      this.increaseSpeed();\r\n    }\r\n  }\r\n\r\n  growSnek() {\r\n    let newSnek = [...this.state.snekBodys];\r\n    newSnek.unshift([]);\r\n    this.setState({\r\n      snekBodys: newSnek\r\n    });\r\n  }\r\n\r\n  increaseSpeed() {\r\n    if (this.state.speed > 10) {\r\n      this.setState({\r\n        speed: this.state.speed - 20\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Snek</h1>\r\n        {/* <h3> X: {this.state.snekBodys[this.state.snekBodys.length - 1][0]} </h3>\r\n        <h3> Y: {this.state.snekBodys[this.state.snekBodys.length - 1][1]} </h3> */}\r\n\r\n        <div className=\"board\" id=\"canvas\">\r\n          <Snek snekBodys={this.state.snekBodys} />\r\n          <Food seg={this.state.food} />\r\n          {/* <div className=\"snek-seg\"></div> */}\r\n        </div>\r\n\r\n        {/* <Canvas /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { render } from \"react-dom\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}